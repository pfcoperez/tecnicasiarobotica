# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vision', [dirname(__file__)])
        except ImportError:
            import _vision
            return _vision
        if fp is not None:
            try:
                _mod = imp.load_module('_vision', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vision = swig_import_helper()
    del swig_import_helper
else:
    import _vision
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Bitmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bitmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["height"] = _vision.Bitmap_height_set
    __swig_getmethods__["height"] = _vision.Bitmap_height_get
    if _newclass:height = _swig_property(_vision.Bitmap_height_get, _vision.Bitmap_height_set)
    __swig_setmethods__["width"] = _vision.Bitmap_width_set
    __swig_getmethods__["width"] = _vision.Bitmap_width_get
    if _newclass:width = _swig_property(_vision.Bitmap_width_get, _vision.Bitmap_width_set)
    __swig_setmethods__["depth"] = _vision.Bitmap_depth_set
    __swig_getmethods__["depth"] = _vision.Bitmap_depth_get
    if _newclass:depth = _swig_property(_vision.Bitmap_depth_get, _vision.Bitmap_depth_set)
    __swig_setmethods__["data"] = _vision.Bitmap_data_set
    __swig_getmethods__["data"] = _vision.Bitmap_data_get
    if _newclass:data = _swig_property(_vision.Bitmap_data_get, _vision.Bitmap_data_set)
    __swig_setmethods__["equivList"] = _vision.Bitmap_equivList_set
    __swig_getmethods__["equivList"] = _vision.Bitmap_equivList_get
    if _newclass:equivList = _swig_property(_vision.Bitmap_equivList_get, _vision.Bitmap_equivList_set)
    def __init__(self): 
        this = _vision.new_Bitmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vision.delete_Bitmap
    __del__ = lambda self : None;
Bitmap_swigregister = _vision.Bitmap_swigregister
Bitmap_swigregister(Bitmap)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _vision.Point_x_set
    __swig_getmethods__["x"] = _vision.Point_x_get
    if _newclass:x = _swig_property(_vision.Point_x_get, _vision.Point_x_set)
    __swig_setmethods__["y"] = _vision.Point_y_set
    __swig_getmethods__["y"] = _vision.Point_y_get
    if _newclass:y = _swig_property(_vision.Point_y_get, _vision.Point_y_set)
    def __init__(self): 
        this = _vision.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vision.delete_Point
    __del__ = lambda self : None;
Point_swigregister = _vision.Point_swigregister
Point_swigregister(Point)

class Blob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Blob, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ul"] = _vision.Blob_ul_set
    __swig_getmethods__["ul"] = _vision.Blob_ul_get
    if _newclass:ul = _swig_property(_vision.Blob_ul_get, _vision.Blob_ul_set)
    __swig_setmethods__["lr"] = _vision.Blob_lr_set
    __swig_getmethods__["lr"] = _vision.Blob_lr_get
    if _newclass:lr = _swig_property(_vision.Blob_lr_get, _vision.Blob_lr_set)
    __swig_setmethods__["cm"] = _vision.Blob_cm_set
    __swig_getmethods__["cm"] = _vision.Blob_cm_get
    if _newclass:cm = _swig_property(_vision.Blob_cm_get, _vision.Blob_cm_set)
    __swig_setmethods__["mass"] = _vision.Blob_mass_set
    __swig_getmethods__["mass"] = _vision.Blob_mass_get
    if _newclass:mass = _swig_property(_vision.Blob_mass_get, _vision.Blob_mass_set)
    __swig_setmethods__["next"] = _vision.Blob_next_set
    __swig_getmethods__["next"] = _vision.Blob_next_get
    if _newclass:next = _swig_property(_vision.Blob_next_get, _vision.Blob_next_set)
    def __init__(self): 
        this = _vision.new_Blob()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vision.delete_Blob
    __del__ = lambda self : None;
Blob_swigregister = _vision.Blob_swigregister
Blob_swigregister(Blob)

MAXBLOBS = _vision.MAXBLOBS
MAXMOTIONLEVELS = _vision.MAXMOTIONLEVELS
class Vision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vision, name)
    __repr__ = _swig_repr
    RED = _vision.Vision_RED
    GREEN = _vision.Vision_GREEN
    BLUE = _vision.Vision_BLUE
    ALL = _vision.Vision_ALL
    BLACK = _vision.Vision_BLACK
    WORKSPACE = _vision.Vision_WORKSPACE
    ORIGINAL = _vision.Vision_ORIGINAL
    IMAGE = _vision.Vision_IMAGE
    AND = _vision.Vision_AND
    OR = _vision.Vision_OR
    XOR = _vision.Vision_XOR
    ACCUM = _vision.Vision_ACCUM
    def __init__(self, *args): 
        this = _vision.new_Vision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vision.delete_Vision
    __del__ = lambda self : None;
    def initialize(self, *args): return _vision.Vision_initialize(self, *args)
    def registerCameraDevice(self, *args): return _vision.Vision_registerCameraDevice(self, *args)
    def superColor(self, *args): return _vision.Vision_superColor(self, *args)
    def matchRange(self, *args): return _vision.Vision_matchRange(self, *args)
    def match(self, *args): return _vision.Vision_match(self, *args)
    def matchList(self, *args): return _vision.Vision_matchList(self, *args)
    def get(self, *args): return _vision.Vision_get(self, *args)
    def set(self, *args): return _vision.Vision_set(self, *args)
    def setVal(self, *args): return _vision.Vision_setVal(self, *args)
    def setImage(self, *args): return _vision.Vision_setImage(self, *args)
    def drawRect(self, *args): return _vision.Vision_drawRect(self, *args)
    def drawCross(self, *args): return _vision.Vision_drawCross(self, *args)
    def scale(self, *args): return _vision.Vision_scale(self, *args)
    def meanBlur(self, *args): return _vision.Vision_meanBlur(self, *args)
    def gaussianBlur(self): return _vision.Vision_gaussianBlur(self)
    def medianBlur(self, *args): return _vision.Vision_medianBlur(self, *args)
    def threshold(self, *args): return _vision.Vision_threshold(self, *args)
    def getMiddleIndex(self, *args): return _vision.Vision_getMiddleIndex(self, *args)
    def inverse(self, *args): return _vision.Vision_inverse(self, *args)
    def getWidth(self): return _vision.Vision_getWidth(self)
    def getHeight(self): return _vision.Vision_getHeight(self)
    def getDepth(self): return _vision.Vision_getDepth(self)
    def saveImage(self, *args): return _vision.Vision_saveImage(self, *args)
    def startMovie(self, *args): return _vision.Vision_startMovie(self, *args)
    def stopMovie(self): return _vision.Vision_stopMovie(self)
    def continueMovie(self): return _vision.Vision_continueMovie(self)
    def getMMap(self): return _vision.Vision_getMMap(self)
    def histogram(self, *args): return _vision.Vision_histogram(self, *args)
    def grayScale(self): return _vision.Vision_grayScale(self)
    def sobel(self, *args): return _vision.Vision_sobel(self, *args)
    def orientation(self, *args): return _vision.Vision_orientation(self, *args)
    def fid(self, *args): return _vision.Vision_fid(self, *args)
    def setPlane(self, *args): return _vision.Vision_setPlane(self, *args)
    def blobify(self, *args): return _vision.Vision_blobify(self, *args)
    def applyFilter(self, *args): return _vision.Vision_applyFilter(self, *args)
    def applyFilters(self, *args): return _vision.Vision_applyFilters(self, *args)
    def addFilter(self, *args): return _vision.Vision_addFilter(self, *args)
    def applyFilterList(self): return _vision.Vision_applyFilterList(self)
    def setFilterList(self, *args): return _vision.Vision_setFilterList(self, *args)
    def getFilterList(self): return _vision.Vision_getFilterList(self)
    def popFilterList(self): return _vision.Vision_popFilterList(self)
    def getCopyMode(self): return _vision.Vision_getCopyMode(self)
    def setCopyMode(self, *args): return _vision.Vision_setCopyMode(self, *args)
    def getRGB(self): return _vision.Vision_getRGB(self)
    def setRGB(self, *args): return _vision.Vision_setRGB(self, *args)
    def mask(self, *args): return _vision.Vision_mask(self, *args)
    def backup(self): return _vision.Vision_backup(self)
    def restore(self): return _vision.Vision_restore(self)
    def motion(self, *args): return _vision.Vision_motion(self, *args)
    def rotate(self): return _vision.Vision_rotate(self)
    def addNoise(self, *args): return _vision.Vision_addNoise(self, *args)
    def getMenu(self): return _vision.Vision_getMenu(self)
    def swapPlanes(self, *args): return _vision.Vision_swapPlanes(self, *args)
    def rgb2yuv(self): return _vision.Vision_rgb2yuv(self)
    def yuv2rgb(self): return _vision.Vision_yuv2rgb(self)
    def rgb2hsv(self): return _vision.Vision_rgb2hsv(self)
    def hsv2rgb(self): return _vision.Vision_hsv2rgb(self)
    def feql(self, *args): return _vision.Vision_feql(self, *args)
Vision_swigregister = _vision.Vision_swigregister
Vision_swigregister(Vision)



